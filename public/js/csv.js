import { DateTime } from 'https://cdn.jsdelivr.net/npm/luxon@2.0.0/build/es6/luxon.js';

export function exportTableToCSV(filename = 'dark_times_export.csv', exportMinimal = false) {
  const table = document.getElementById('CalcTable');
  const rows = Array.from(table.rows);
  let csv = [];

  // Attribution block
  csv.push('# Data generated by the darkSky web app');
  csv.push('# Website: https://bobhampton.github.io/darkSky/');
  csv.push('# GitHub: https://github.com/bobhampton/darkSky');
  csv.push('# DOI: https://doi.org/10.5281/zenodo.14847872');
  csv.push('# If you use this data in published research please cite the project using the DOI above.');
  csv.push(''); // spacer row

  // Capture User Inputs
  const lat = document.getElementById('EditLatitude')?.value || '';
  const lon = document.getElementById('EditLongitude')?.value || '';
  const elevation = document.getElementById('EditElevation')?.value || '';
  const dateStart = document.getElementById('EditDateStart')?.value || '';
  const dateEnd = document.getElementById('EditDateEnd')?.value || '';
  const timeZone = document.getElementById('timezoneSelect')?.value || 'UTC';

  // Prepend User Metadata Rows
  csv.push('User inputs:');
  csv.push(['Observer Latitude:', lat].join(','));
  csv.push(['Observer Longitude:', lon].join(','));
  csv.push(['Elevation (meters):', elevation].join(','));
  csv.push(['Date Range:', `${dateStart} to ${dateEnd}`].join(','));
  csv.push(['Output Time Zone:', timeZone].join(','));
  csv.push('');

  // Define Headers
  const baseHeaders = [
    'Date (YYYY-MM-DD)',
    'Dark Time Start',
    'Dark Time End',
    'Dark Time Start',
    'Dark Time End'
  ];

  const extraHeaders = [
    'Moon Rise',
    'Moon Set',
    'Moon Altitude @ 00:00:00',
    'Moon Altitude @ Astronomical Twilight Start',
    'Astronomical Twilight Start',
    'Astronomical Twilight End',
    'Moon Altitude @ Astronomical Twilight End',
    'Moon Altitude @ 23:59:59'
  ];

  csv.push([...baseHeaders, ...(exportMinimal ? [] : extraHeaders)].join(','));

  for (let i = 1; i < rows.length; i++) {
    const row = rows[i];

    if (row.classList.contains('details-row')) continue;

    const meta = JSON.parse(row.dataset.meta || '{}');
    const dawn = meta.dawn || {};
    const dusk = meta.dusk || {};

    const fmt = (val) => val ? DateTime.fromJSDate(new Date(val)).toFormat('HH:mm:ss') : '';

    let dawnStart = fmt(dawn.start);
    let dawnEnd = fmt(dawn.end);
    let duskStart = fmt(dusk.start);
    let duskEnd = fmt(dusk.end);

    // Check if it's a full day dark sky window
    const isFullDark =
      dawnStart === '00:00:00' &&
      dawnEnd === '23:59:59' &&
      duskStart === '00:00:00' &&
      duskEnd === '23:59:59';

    if (isFullDark) {
      dawnEnd = '---';
      duskStart = '---';
    }

    const basicData = [
      row.dataset.date || '',
      dawnStart,
      dawnEnd,
      duskStart,
      duskEnd
    ].map(text => {
      const cleaned = text.replace(/"/g, '""');
      return cleaned.includes(',') ? `"${cleaned}"` : cleaned;
    });

    const rowData = [...basicData];

    if (!exportMinimal) {
      let meta = {};
      try {
        meta = JSON.parse(row.dataset.meta);
      } catch (err) {
        console.warn("ERROR: Invalid meta format", err);
      }

      const dawn = meta.dawn || {};
      const dusk = meta.dusk || {};

      const fmt = (val) => val ? DateTime.fromJSDate(new Date(val)).toFormat('HH:mm:ss') : '';
      const fmtNum = (num) => typeof num === 'number' ? num.toFixed(2) : '';

      // Add extra data in specified column order
      rowData.push(
        fmt(dawn.moonRise || dusk.moonRise),
        fmt(dawn.moonSet || dusk.moonSet),
        fmtNum(dawn.moonAltStartDay || dusk.moonAltStartDay),
        fmtNum(dawn.moonAltEndTwilight || dusk.moonAltEndTwilight),
        fmt(dawn.twilightEnd || dusk.twilightEnd),
        fmt(dawn.twilightStart || dusk.twilightStart),
        fmtNum(dawn.moonAltStartTwilight || dusk.moonAltStartTwilight),
        fmtNum(dawn.moonAltEndDay || dusk.moonAltEndDay)
      );
    }

    csv.push(rowData.join(','));
  }

  // Trigger download
  const csvString = csv.join('\n');
  const blob = new Blob([csvString], { type: 'text/csv' });
  const url = window.URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.setAttribute('href', url);
  a.setAttribute('download', filename);
  a.style.display = 'none';
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
}
